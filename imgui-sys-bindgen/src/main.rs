use imgui_sys_bindgen::generate_bindings;
use std::env;

fn main() {
    let cwd = env::current_dir().expect("Failed to read current directory");
    let sys_path = cwd
        .join("..")
        .join("imgui-sys")
        .canonicalize()
        .expect("Failed to find imgui-sys directory");

    let wasm_ffi_import_name = option_env!("IMGUI_RS_WASM_IMPORT_NAME")
        .map(|s| s.to_string())
        .or(Some("imgui-sys-v0".to_string()));

    let (bindings, wasm_bindings) = {
        let bindings = generate_bindings(&sys_path.join("third-party/main"), None)
            .expect("Failed to generate bindings");

        let wasm_bindings = generate_bindings(
            &sys_path.join("third-party/main"),
            wasm_ffi_import_name.clone(),
        )
        .expect("Failed to generate bindings");

        (bindings.to_string(), wasm_bindings.to_string())
    };

    let (docking_bindings, wasm_docking_bindings) = {
        let bindings = generate_bindings(&sys_path.join("third-party/docking"), None)
            .expect("Failed to generate bindings");

        let wasm_bindings =
            generate_bindings(&sys_path.join("third-party/docking"), wasm_ffi_import_name)
                .expect("Failed to generate bindings");

        (bindings.to_string(), wasm_bindings.to_string())
    };

    let output_path = sys_path.join("src").join("wasm_docking_bindings.rs");
    std::fs::write(output_path, wasm_docking_bindings).expect("failed writing");

    let output_path = sys_path.join("src").join("wasm_bindings.rs");
    std::fs::write(output_path, wasm_bindings).expect("failed writing");

    let output_path = sys_path.join("src").join("bindings.rs");
    std::fs::write(output_path, bindings).expect("failed writing");

    let output_path = sys_path.join("src").join("docking_bindings.rs");
    std::fs::write(output_path, docking_bindings).expect("failed writing");

    let output_path = sys_path.join("src").join("all_bindings.rs");
    let all_bindings = r#"// @generated by imgui-sys-bindgen
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]

#[cfg(all(feature = "docking", feature = "wasm"))]
mod bindings {
    include!("wasm_docking_bindings.rs");
}

#[cfg(all(feature = "docking", not(feature = "wasm")))]
mod bindings {
    include!("docking_bindings.rs");
}

#[cfg(all(not(feature = "docking"), not(feature = "wasm")))]
mod bindings {
    include!("bindings.rs");
}

#[cfg(all(not(feature = "docking"), feature = "wasm"))]
mod bindings {
    include!("wasm_bindings.rs");
}

pub use bindings::*;
"#;
    std::fs::write(output_path, all_bindings).expect("failed writing");
}
